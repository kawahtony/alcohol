#%% This script creates Fig 3import matplotlib.pyplot as pltimport pandas as pdimport numpy as np#%% Intialize the figurefig, ax = plt.subplots(1,2, figsize=(10,4), dpi=400, tight_layout=True)#%% First plot: m2f for age# Set gender and timeframegender = "Male"tvec = np.arange(1999, 2025)# Load data of 15-74 years into a dataframedf = pd.read_csv('data_raw/age_15-74_1999_2024_yearly.txt', sep='\t')df = df.replace("Unreliable", np.nan)df = df.replace("Suppressed", np.nan)# Compute crude rates for 10 years group between 15-74def compute_crude_rate(df, age_group):    death = df[df["Ten-Year Age Groups"] == age_group + " years"]["Deaths"].astype(float).to_numpy()    pop = df[df["Ten-Year Age Groups"] == age_group + " years"]["Population"].astype(float).to_numpy()    cr = (death / pop) * 1e5    return crcr_15_24_male = compute_crude_rate(df[df["Gender"] == "Male"], "15-24") ; cr_25_34_male = compute_crude_rate(df[df["Gender"] == "Male"], "25-34") cr_35_44_male = compute_crude_rate(df[df["Gender"] == "Male"], "35-44") cr_45_54_male = compute_crude_rate(df[df["Gender"] == "Male"], "45-54") cr_55_64_male = compute_crude_rate(df[df["Gender"] == "Male"], "55-64") cr_65_74_male = compute_crude_rate(df[df["Gender"] == "Male"], "65-74") cr_15_24_female = compute_crude_rate(df[df["Gender"] == "Female"], "15-24") ; cr_25_34_female = compute_crude_rate(df[df["Gender"] == "Female"], "25-34") cr_35_44_female = compute_crude_rate(df[df["Gender"] == "Female"], "35-44") cr_45_54_female = compute_crude_rate(df[df["Gender"] == "Female"], "45-54") cr_55_64_female = compute_crude_rate(df[df["Gender"] == "Female"], "55-64") cr_65_74_female = compute_crude_rate(df[df["Gender"] == "Female"], "65-74") # Load data of 75+ years into a dataframedf = pd.read_csv("data_raw/age_75+_1999_2024_yearly.txt", sep="\t")df = df.replace("Unreliable", np.nan)df = df.replace("Suppressed", np.nan)death_75p_male = df[df["Gender"] == "Male"]["Deaths"].astype(float).to_numpy()pop_75p_male = df[df["Gender"] == "Male"]["Population"].astype(float).to_numpy()cr_75p_male = (death_75p_male / pop_75p_male) * 1e5death_75p_female = df[df["Gender"] == "Female"]["Deaths"].astype(float).to_numpy()pop_75p_female = df[df["Gender"] == "Female"]["Population"].astype(float).to_numpy()cr_75p_female = (death_75p_female / pop_75p_female) * 1e5# Compute female to male ratiom2f_15_24 = cr_15_24_male / cr_15_24_femalem2f_25_34 = cr_25_34_male / cr_25_34_femalem2f_35_44 = cr_35_44_male / cr_35_44_femalem2f_45_54 = cr_45_54_male / cr_45_54_femalem2f_55_64 = cr_55_64_male / cr_55_64_femalem2f_65_74 = cr_65_74_male / cr_65_74_femalem2f_75p = cr_75p_male / cr_75p_female# Plot normalized crude ratems = 4ax[0].plot(tvec, m2f_15_24, 'b-o', markersize=ms, label="15-24 yrs", alpha=0.2)ax[0].plot(tvec, m2f_25_34, 'b-o', markersize=ms, label="25-34 yrs", alpha=0.4)ax[0].plot(tvec, m2f_35_44, 'b-o', markersize=ms, label="35-44 yrs", alpha=0.9999)ax[0].plot(tvec, m2f_45_54, 'k-o', markersize=ms, label="45-54 yrs", alpha=1)ax[0].plot(tvec, m2f_55_64, 'r-o', markersize=ms, label="55-64 yrs", alpha=0.9999)ax[0].plot(tvec, m2f_65_74, 'r-o', markersize=ms, label="65-74 yrs", alpha=0.4)ax[0].plot(tvec, m2f_75p, 'r-o', markersize=ms, label="75+ yrs", alpha=0.2)# Plot: xlim, ylimax[0].set_xlim([1999, 2025])ymin, ymax = -0.5, 8.5ax[0].set_ylim([ymin, ymax])# Plot: legend, xlabel, ylabel, gridax[0].set_xlabel("Year")ax[0].set_ylabel("Male-to-female ratio")ax[0].legend(frameon=False, ncol=2) ax[0].grid(visible=True, alpha=0.2)# Plot setting: xticks, yticksyticks = np.arange(0, 9, 1)ytick_labels = ['0', '', '2', '', '4', '', '6', '', '8']ax[0].set_yticks(yticks)ax[0].set_yticklabels(ytick_labels)ax[0].tick_params(axis='y', which='major', length=4)  # Long ticks for all ticksfor tick, label in zip(ax[0].yaxis.get_major_ticks(), ytick_labels):    if label == '':  # Shorter ticks for non-integral values        tick.tick1line.set_markersize(2)        tick.tick2line.set_markersize(2)#%% Second plot: m2f for racedf_his = pd.read_csv("data_raw/hispanic_1999_2020_yearly.txt", delimiter="\t")df_his = df_his.replace("Unreliable", np.nan)df_his = df_his.replace("Suppressed", np.nan)df_his = df_his.replace("Not Applicable", np.nan)#%% Load non-hispanic data (AIAN, API, Black, Mixed and White )df_nonhis = pd.read_csv("data_raw/nonhispanic_1999_2020_yearly.txt",delimiter="\t")df_nonhis=df_nonhis.replace("Unreliable", np.nan)df_nonhis=df_nonhis.replace("Suppressed", np.nan)#%% Extract crude rates MaleH = df_his[df_his["Gender"] == "Male"][["Year", "Deaths","Crude Rate"]].astype(float) MaleAI = df_nonhis[(df_nonhis["Gender"] == "Male") & \                   (df_nonhis["Race"] == "American Indian or Alaska Native")][["Year", "Deaths","Crude Rate"]].astype(float) MaleW = df_nonhis[(df_nonhis["Gender"] == "Male") & \                  (df_nonhis["Race"] == "White")][["Year", "Deaths","Crude Rate"]].astype(float) MaleB = df_nonhis[(df_nonhis["Gender"] == "Male") & \                  (df_nonhis["Race"] == "Black or African American")][["Year","Deaths", "Crude Rate"]].astype(float) MaleA = df_nonhis[(df_nonhis["Gender"] == "Male") & \                  (df_nonhis["Race"] == "Asian or Pacific Islander")][["Year", "Deaths", "Crude Rate"]].astype(float)MaleN = df_nonhis[(df_nonhis["Gender"] == "Male") & \                  (df_nonhis["Race"] == "Native Hawaiian or Other Pacific Islander")] [["Year","Deaths", "Crude Rate"]].astype(float)# Male2 = df_nonhis[(df_nonhis["Gender"] == "Male") & \#                   (df_nonhis["Race"] == "More than one race")][["Year", "Deaths", "Crude Rate"]].astype(float)    FemaleH = df_his[df_his["Gender"] == "Female"][["Year", "Deaths", "Crude Rate"]].astype(float) FemaleAI = df_nonhis[(df_nonhis["Gender"] == "Female") & \                     (df_nonhis["Race"] == "American Indian or Alaska Native")][["Year", "Deaths","Crude Rate"]].astype(float)FemaleW = df_nonhis[(df_nonhis["Gender"] == "Female") & \                    (df_nonhis["Race"] == "White")][["Year", "Deaths", "Crude Rate"]].astype(float) FemaleB = df_nonhis[(df_nonhis["Gender"] == "Female") & \                    (df_nonhis["Race"] == "Black or African American")][["Year", "Deaths","Crude Rate"]].astype(float) FemaleA = df_nonhis[(df_nonhis["Gender"] == "Female") & \                    (df_nonhis["Race"] == "Asian or Pacific Islander")][["Year","Deaths", "Crude Rate"]].astype(float) #%% Plot male race groups (NORMALIZED)x = MaleH["Year"].astype(int)yai_male = MaleAI["Crude Rate"].astype(float).to_numpy()ya_male = MaleA["Crude Rate"].astype(float).to_numpy()yb_male = MaleB["Crude Rate"].astype(float).to_numpy()yh_male = MaleH["Crude Rate"].astype(float).to_numpy()yw_male = MaleW["Crude Rate"].astype(float).to_numpy()yai_female = FemaleAI["Crude Rate"].astype(float).to_numpy()ya_female = FemaleA["Crude Rate"].astype(float).to_numpy()yb_female = FemaleB["Crude Rate"].astype(float).to_numpy()yh_female = FemaleH["Crude Rate"].astype(float).to_numpy()yw_female = FemaleW["Crude Rate"].astype(float).to_numpy()ms = 4 ax[1].plot(x, yai_male/yai_female, '-o', markersize=ms, color="tab:red", label="AIAN")ax[1].plot(x, ya_male/ya_female, '-o', markersize=ms, color="tab:blue",label="API")ax[1].plot(x, yb_male/yb_female, '-o', markersize=ms, color="tab:green",label="Black")ax[1].plot(x, yh_male/yh_female, '-o', markersize=ms, color="black" ,label="Hispanic")ax[1].plot(x, yw_male/yw_female, '-o', markersize=ms, color="tab:orange",label="White")# Plot: xlim, ylimax[1].set_xlim([1999, 2025])ymin, ymax = -0.5, 8.5ax[1].set_ylim([ymin, ymax])# Plot: legend, xlabel, ylabel, gridax[1].legend(frameon=False, ncol=3)ax[1].set_xlabel("Year")ax[1].grid(visible=True, alpha=0.2)# Plot setting: xticks, yticksyticks = np.arange(0, 9, 1)ytick_labels = ['0', '', '2', '', '4', '', '6', '', '8']ax[1].set_yticks(yticks)ax[1].set_yticklabels(ytick_labels)ax[1].tick_params(axis='y', which='major', length=4)  # Long ticks for all ticksfor tick, label in zip(ax[1].yaxis.get_major_ticks(), ytick_labels):    if label == '':  # Shorter ticks for non-integral values        tick.tick1line.set_markersize(2)        tick.tick2line.set_markersize(2)fig.savefig('Fig3.tiff', dpi=400, format="tiff", pil_kwargs={"compression": "tiff_lzw"})