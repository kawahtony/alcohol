#%% This script creates Fig 4## Import packagesimport numpy as npimport pandas as pdimport matplotlib.pyplot as pltimport picklefrom scipy.interpolate import CubicSplinefrom helper_functions import round_up_month## Global plot settingplt.rcParams['axes.titley'] = 1.0# plt.rcParams['axes.titlepad'] = -15  # pad is in points...azure = [v/255 for v in [0, 128, 255]]jade = [v/255 for v in [0, 168, 107]]coral = [v/255 for v in [255, 127, 80]]#%% def plot_tcp(o, ax, cl):    num_cp = int(o.trend.ncp_median[0])    cp_set = o.trend.cp[:num_cp]    cpCI_l_set = o.trend.cpCI[:num_cp,0]    cpCI_r_set = o.trend.cpCI[:num_cp,1]    cpAbruptChange_set = o.trend.cpAbruptChange[:num_cp]    idx = np.argsort(cp_set)    cp_set, cpCI_l_set, cpCI_r_set, cpAbruptChange_set = cp_set[idx], cpCI_l_set[idx],\                                                         cpCI_r_set[idx], cpAbruptChange_set[idx]    for k in range(num_cp):        cp = cp_set[k]        # Get the index of the month before cp        idx_previous = np.argmin(abs(o.time - cp)) - 1        # Trend value at and before cp        Y = o.trend.Y[idx_previous + 1]        Y_previous = o.trend.Y[idx_previous]         if np.abs(cpAbruptChange_set[k]) > 0.05 and np.abs(cpAbruptChange_set[k]/Y_previous) > 0.05:            ax.plot(cp_set[k], Y, 's', markersize=8, color=cl)    return None#%% Intialize the figurefig, ax = plt.subplots(6,3, figsize=(15,16), dpi=200, tight_layout=True)#%% Loop over different age groupsage_group_list = ['15-34', '35-44', '45-54', '55-64', '65-74', '75+']fs = 12for k in range(6):        age_group = age_group_list[k]        filename = 'data_generated/age/' + age_group + '_Male.pkl'    with open(filename, 'rb') as inp:        o_male = pickle.load(inp)    ax[k,0].plot(o_male.time, o_male.data, 'bo', markersize=2, alpha=0.2)    ax[k,0].fill_between(o_male.time, o_male.trend.CI[:,1], o_male.trend.CI[:,0], color='b', alpha=0.2)    ax[k,0].plot(o_male.time, o_male.trend.Y, 'b-', linewidth=2, label="Males")            filename = 'data_generated/age/' + age_group + '_Female.pkl'    with open(filename, 'rb') as inp:        o_female = pickle.load(inp)    ax[k,0].plot(o_female.time, o_female.data, 'ro', markersize=2, alpha=0.2)    ax[k,0].fill_between(o_female.time, o_female.trend.CI[:,1], o_female.trend.CI[:,0], color='r', alpha=0.2)    ax[k,0].plot(o_female.time, o_female.trend.Y, 'r-', linewidth=2, label="Females")            # Highlight trend change point    num_cp = int(o_male.trend.ncp_median[0])    if num_cp > 0:        plot_tcp(o_male, ax[k,0], "b")        num_cp = int(o_female.trend.ncp_median[0])    if num_cp > 0:        plot_tcp(o_female, ax[k,0], "r")    # Plot: ylabel    ax[k,0].set_ylabel('Monthly Crude Rate', fontsize=fs)    # Plot: xlim, xticks    ax[k,0].set_xlim([2018, 2025])    x_tick = np.arange(2018, 2026)    x_ticklabels = ["'18", "'19", "'20", "'21", "'22", "'23", "'24", "'25"]    ax[k,0].set_xticks(x_tick, x_ticklabels, fontsize=fs)    # Plot: ylim, yticks    if age_group == "15-34":        ax[k,0].set_ylim([-0.01, 0.49])            yticks = np.arange(0., 0.49, 0.16)        ytick_labels = ['0', '0.16', '0.32', '0.48']        ax[k,0].set_yticks(yticks, ytick_labels, fontsize=fs)        ax[k,0].tick_params(axis='y', which='major', length=4)  # Long ticks for all ticks        for tick, label in zip(ax[k,0].yaxis.get_major_ticks(), ytick_labels):            if label == '':  # Shorter ticks for non-integral values                tick.tick1line.set_markersize(2)                tick.tick2line.set_markersize(2)        ax[k,0].legend(frameon=False, fontsize=fs)            elif age_group == "35-44":        ax[k,0].set_ylim([-0.1, 2.5])            yticks = np.arange(0, 2.5, 0.8)        ytick_labels = ['0', '0.8', '1.6', '2.4']        ax[k,0].set_yticks(yticks, ytick_labels, fontsize=fs)        ax[k,0].tick_params(axis='y', which='major', length=4)  # Long ticks for all ticks        for tick, label in zip(ax[k,0].yaxis.get_major_ticks(), ytick_labels):            if label == '':  # Shorter ticks for non-integral values                tick.tick1line.set_markersize(2)                tick.tick2line.set_markersize(2)         ax[k,0].legend(frameon=False, fontsize=fs)                elif age_group == "45-54":        ax[k,0].set_ylim([-0.2, 4.2])            # ax.set_yticks([0.0, 0.2, 0.4])        yticks = np.arange(0., 4, 1.3)        ytick_labels = ['0', '1.3', '2.6', '3.9']        ax[k,0].set_yticks(yticks, ytick_labels, fontsize=fs)        ax[k,0].tick_params(axis='y', which='major', length=4)  # Long ticks for all ticks        for tick, label in zip(ax[k,0].yaxis.get_major_ticks(), ytick_labels):            if label == '':  # Shorter ticks for non-integral values                tick.tick1line.set_markersize(2)                tick.tick2line.set_markersize(2)        ax[k,0].legend(frameon=False, fontsize=fs)            elif age_group == "55-64":        ax[k,0].set_ylim([-0.2, 6.2])            yticks = np.arange(0, 6.1, 2)        ytick_labels = ['0', '2', '4', '6']        ax[k,0].set_yticks(yticks, ytick_labels, fontsize=fs)        ax[k,0].tick_params(axis='y', which='major', length=4)  # Long ticks for all ticks        for tick, label in zip(ax[k,0].yaxis.get_major_ticks(), ytick_labels):            if label == '':  # Shorter ticks for non-integral values                tick.tick1line.set_markersize(2)                tick.tick2line.set_markersize(2)        ax[k,0].legend(frameon=False, fontsize=fs)            elif age_group == "65-74":        ax[k,0].set_ylim([-0.1, 4.6])            yticks = np.arange(0, 4.6, 1.5)        ytick_labels = ['0', '1.5', '3', '4.5']        ax[k,0].set_yticks(yticks, ytick_labels, fontsize=fs)        ax[k,0].tick_params(axis='y', which='major', length=4)  # Long ticks for all ticks        for tick, label in zip(ax[k,0].yaxis.get_major_ticks(), ytick_labels):            if label == '':  # Shorter ticks for non-integral values                tick.tick1line.set_markersize(2)                tick.tick2line.set_markersize(2)        ax[k,0].legend(frameon=False, fontsize=fs)            elif age_group == "75+":        ax[k,0].set_ylim([-0.1, 2.5])            yticks = np.arange(0, 2.5, 0.8)        ytick_labels = ['0', '0.8', '1.6', '2.4']        ax[k,0].set_yticks(yticks, ytick_labels, fontsize=fs)        ax[k,0].tick_params(axis='y', which='major', length=4)  # Long ticks for all ticks        for tick, label in zip(ax[k,0].yaxis.get_major_ticks(), ytick_labels):            if label == '':  # Shorter ticks for non-integral values                tick.tick1line.set_markersize(2)                tick.tick2line.set_markersize(2)        ax[k,0].legend(frameon=False, fontsize=fs)        ax[k,0].set_xlabel('Year', fontsize=fs)    ax[k,0].set_title(age_group + ' years' + ' (All causes)', fontsize=fs, loc='left')    ax[k,0].grid(visible=True, alpha=0.3) for gender in ["Male", "Female"]:        if gender == "Male":        colidx = 1    elif gender == "Female":        colidx = 2                    for k in range(6):                age_group = age_group_list[k]                filename = 'data_generated/age_ALD/' + age_group + '_' + gender + '.pkl'        with open(filename, 'rb') as inp:            o = pickle.load(inp)        ax[k,colidx].plot(o.time, o.data, 'o', markersize=2, alpha=0.2, color=azure)        ax[k,colidx].fill_between(o.time, o.trend.CI[:,1], o.trend.CI[:,0], color=azure, alpha=0.2)        ax[k,colidx].plot(o.time, o.trend.Y, '-', linewidth=2, color=azure, label="ALD")        try:            num_cp = int(o.trend.ncp_median[0])            cp_set = o.trend.cp[:num_cp]            cs = CubicSpline(o.time, o.trend.Y)            if num_cp > 0:                plot_tcp(o, ax[k,colidx], azure)        except:            None                filename = 'data_generated/age_mental/' + age_group + '_' + gender + '.pkl'        with open(filename, 'rb') as inp:            o = pickle.load(inp)        ax[k,colidx].plot(o.time, o.data, 'o', markersize=2, alpha=0.2, color=jade)        ax[k,colidx].fill_between(o.time, o.trend.CI[:,1], o.trend.CI[:,0], alpha=0.2, color=jade)        ax[k,colidx].plot(o.time, o.trend.Y, '-', linewidth=2, color=jade, label="Mental/Behavioral")        try:            num_cp = int(o.trend.ncp_median[0])            cp_set = o.trend.cp[:num_cp]            cs = CubicSpline(o.time, o.trend.Y)            if num_cp > 0:                plot_tcp(o, ax[k,colidx], jade)        except:            None                try:            filename = 'data_generated/age_poisoning/' + age_group + '_' + gender + '.pkl'            with open(filename, 'rb') as inp:                o = pickle.load(inp)            ax[k,colidx].plot(o.time, o.data, 'o', markersize=2, alpha=0.2, color=coral)            ax[k,colidx].fill_between(o.time, o.trend.CI[:,1], o.trend.CI[:,0], alpha=0.2, color=coral)            ax[k,colidx].plot(o.time, o.trend.Y, '-', linewidth=2, color=coral, label="Poisoning")            try:                num_cp = int(o.trend.ncp_median[0])                cp_set = o.trend.cp[:num_cp]                cs = CubicSpline(o.time, o.trend.Y)                if num_cp > 0:                    plot_tcp(o, ax[k,colidx], coral)            except:                None        except:            None                                # Plot: xlim, xticks        ax[k,colidx].set_xlim([2018, 2025])        x_tick = np.arange(2018, 2026)        x_ticklabels = ["'18", "'19", "'20", "'21", "'22", "'23", "'24", "'25"]        ax[k,colidx].set_xticks(x_tick, x_ticklabels, fontsize=fs)        if age_group == "15-34":                ax[k,colidx].set_ylim([-0.01, 0.25])                yticks = np.arange(0., 0.25, 0.08)            ytick_labels = [' 0', '0.08', '0.16', '0.24']            ax[k,colidx].set_yticks(yticks, ytick_labels, fontsize=fs)            ax[k,colidx].tick_params(axis='y', which='major', length=4)  # Long ticks for all ticks            for tick, label in zip(ax[k,colidx].yaxis.get_major_ticks(), ytick_labels):                if label == '':  # Shorter ticks for non-integral values                    tick.tick1line.set_markersize(2)                    tick.tick2line.set_markersize(2)            if gender == "Male":                ax[k,colidx].legend(frameon=False, fontsize=fs, loc="center right", bbox_to_anchor=(0.9,0.5))            else:                 ax[k,colidx].legend(frameon=False, fontsize=fs, loc="upper left")                                elif age_group == "35-44":            ax[k,colidx].set_ylim([-0.1, 1.6])            yticks = np.arange(0., 1.6, 0.5)            ytick_labels = ['0', '0.5', '1', '1.5']            ax[k,colidx].set_yticks(yticks, ytick_labels, fontsize=fs)            ax[k,colidx].tick_params(axis='y', which='major', length=4)  # Long ticks for all ticks            for tick, label in zip(ax[k,colidx].yaxis.get_major_ticks(), ytick_labels):                if label == '':  # Shorter ticks for non-integral values                    tick.tick1line.set_markersize(2)                    tick.tick2line.set_markersize(2)                if gender == "Male":                    ax[k,colidx].legend(frameon=False, fontsize=fs, loc="center right", bbox_to_anchor=(1.0,0.35))                    else:                    ax[k,colidx].legend(frameon=False, fontsize=fs, loc="upper left")                    elif age_group == "45-54":            ax[k,colidx].set_ylim([-0.1, 2.5])            yticks = np.arange(0., 2.5, 0.8)            ytick_labels = [' 0', '0.8', '1.6', '2.4']            ax[k,colidx].set_yticks(yticks, ytick_labels, fontsize=fs)            ax[k,colidx].tick_params(axis='y', which='major', length=4)  # Long ticks for all ticks            for tick, label in zip(ax[k,colidx].yaxis.get_major_ticks(), ytick_labels):                if label == '':  # Shorter ticks for non-integral values                    tick.tick1line.set_markersize(2)                    tick.tick2line.set_markersize(2)            if gender == "Male":                ax[k,colidx].legend(frameon=False, loc="center", bbox_to_anchor=(0.73,0.33), fontsize=fs)            else:                ax[k,colidx].legend(frameon=False, loc="upper left", fontsize=fs)                        elif age_group == "55-64":            ax[k,colidx].set_ylim([-0.1, 3.7])            yticks = np.arange(0., 3.7, 1.2)            ytick_labels = ['0', '1.2', '2.4', '3.6']            ax[k,colidx].set_yticks(yticks, ytick_labels, fontsize=fs)            ax[k,colidx].tick_params(axis='y', which='major', length=4)  # Long ticks for all ticks            for tick, label in zip(ax[k,colidx].yaxis.get_major_ticks(), ytick_labels):                if label == '':  # Shorter ticks for non-integral values                    tick.tick1line.set_markersize(2)                    tick.tick2line.set_markersize(2)                if gender == "Male":                ax[k,colidx].legend(frameon=False, loc="lower right", bbox_to_anchor=(1,0.05), fontsize=fs)            else:                ax[k,colidx].legend(frameon=False, loc="upper left", fontsize=fs)                    elif age_group == "65-74":            ax[k,colidx].set_ylim([-0.1, 2.8])            yticks = np.arange(0., 2.8, 0.9)            ytick_labels = ['0', '0.9', '1.8', '2.7']            ax[k,colidx].set_yticks(yticks, ytick_labels, fontsize=fs)            ax[k,colidx].tick_params(axis='y', which='major', length=4)  # Long ticks for all ticks            for tick, label in zip(ax[k,colidx].yaxis.get_major_ticks(), ytick_labels):                if label == '':  # Shorter ticks for non-integral values                    tick.tick1line.set_markersize(2)                    tick.tick2line.set_markersize(2)            if gender == "Female":                ax[k,colidx].legend(frameon=False, loc="upper left", fontsize=fs)            else:                ax[k,colidx].legend(frameon=False, loc="center right", bbox_to_anchor=(1,0.3), fontsize=fs)                        elif age_group == "75+":            ax[k,colidx].set_ylim([-0.1, 1.6])            yticks = np.arange(0., 1.6, 0.5)            ytick_labels = ['0', '0.5', '1', '1.5']            ax[k,colidx].set_yticks(yticks, ytick_labels, fontsize=fs)            ax[k,colidx].tick_params(axis='y', which='major', length=4)  # Long ticks for all ticks            ax[k,colidx].set_xlabel('Year', fontsize=fs)             for tick, label in zip(ax[k,colidx].yaxis.get_major_ticks(), ytick_labels):                if label == '':  # Shorter ticks for non-integral values                    tick.tick1line.set_markersize(2)                    tick.tick2line.set_markersize(2)            if gender == "Male":                ax[k,colidx].legend(frameon=False, loc="lower right", fontsize=fs)            else:                ax[k,colidx].legend(frameon=False, loc="upper left", fontsize=fs)                                     ## Plot: xlabel, ylabel        # ax[k,colidx].set_ylabel('Monthly Crude Rate', fontsize=fs)        ## Plot: title, grid, legned        ax[k,colidx].set_title(age_group + ' years (' + gender + 's, by cause)', fontsize=fs, loc="left")        ax[k,colidx].grid(visible=True, alpha=0.3)                        fig.savefig('Fig5.tiff', dpi=400, format="tiff", pil_kwargs={"compression": "tiff_lzw"})        