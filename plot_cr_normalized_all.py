#%% This script creates Fig 2import matplotlib.pyplot as pltimport pandas as pdimport numpy as np#%%def compute_crude_rate(df, age_group):    death = df[df["Ten-Year Age Groups"] == age_group + " years"]["Deaths"].astype(float).to_numpy()    pop = df[df["Ten-Year Age Groups"] == age_group + " years"]["Population"].astype(float).to_numpy()    cr = (death / pop) * 1e5    return cr#%% Intialize the figurefig, ax = plt.subplots(2,2, figsize=(10,8), dpi=400, tight_layout=True)#%% First row: agefor gender in ["Male", "Female"]:          tvec = np.arange(1999, 2025)        if gender == "Male":        colidx = 0    else:        colidx = 1            ## Load data of 15-74 years into a dataframe    df = pd.read_csv("data_raw/age_15-74_1999_2024_yearly.txt", sep="\t")    df = df[df["Gender"] == gender]    df = df.replace("Unreliable", np.nan)    df = df.replace("Suppressed", np.nan)        ## Compute crude rates for 10 years group between 15-74    cr_15_24 = compute_crude_rate(df, "15-24")     cr_25_34 = compute_crude_rate(df, "25-34")    cr_35_44 = compute_crude_rate(df, "35-44")     cr_45_54 = compute_crude_rate(df, "45-54")     cr_55_64 = compute_crude_rate(df, "55-64")    cr_65_74 = compute_crude_rate(df, "65-74")         ## Load data of 75+ years into a dataframe    df = pd.read_csv("data_raw/age_75+_1999_2024_yearly.txt", sep="\t")    df = df[df["Gender"] == gender]    df = df.replace("Unreliable", np.nan)    df = df.replace("Suppressed", np.nan)    death_75p = df["Deaths"].astype(float).to_numpy()    pop_75p = df["Population"].astype(float).to_numpy()    cr_75p = (death_75p / pop_75p) * 1e5    ms = 4    ax[0,colidx].plot(tvec, cr_15_24/cr_15_24[0], 'b-o', markersize=ms, label="15-24 yrs", alpha=0.2)    ax[0,colidx].plot(tvec, cr_25_34/cr_25_34[0], 'b-o', markersize=ms, label="25-34 yrs", alpha=0.4)    ax[0,colidx].plot(tvec, cr_35_44/cr_35_44[0], 'b-o', markersize=ms, label="35-44 yrs", alpha=0.9999)    ax[0,colidx].plot(tvec, cr_45_54/cr_45_54[0], 'k-o', markersize=ms, label="45-54 yrs", alpha=1)    ax[0,colidx].plot(tvec, cr_55_64/cr_55_64[0], 'r-o', markersize=ms, label="55-64 yrs", alpha=0.9999)    ax[0,colidx].plot(tvec, cr_65_74/cr_65_74[0], 'r-o', markersize=ms, label="65-74 yrs", alpha=0.4)    ax[0,colidx].plot(tvec, cr_75p/cr_75p[0], 'r-o', markersize=ms, label="75+ yrs", alpha=0.2)    # Plot: xlim, ylim    ax[0,colidx].set_xlim([1999, 2025])    ax[0,colidx].set_ylim([0.5,5.5])    # Plot: legend, xlabel, ylabel, grid    ax[0,colidx].legend(frameon=False)    # ax[0,colidx].set_xlabel("Year")    if gender == 'Male':        ax[0,colidx].set_ylabel("Normalized Crude Rate")    ax[0,colidx].grid(visible=True, alpha=0.2)            # Plot setting: xticks, yticks    yticks = np.arange(0.5, 5.5, 0.5)    ytick_labels = ['', '1', '', '2', '', '3', '', '4', '', '5']    ax[0,colidx].set_yticks(yticks)    ax[0,colidx].set_yticklabels(ytick_labels)    ax[0,colidx].tick_params(axis='y', which='major', length=4)  # Long ticks for all ticks    for tick, label in zip(ax[0,colidx].yaxis.get_major_ticks(), ytick_labels):        if label == '':  # Shorter ticks for non-integral values            tick.tick1line.set_markersize(2)            tick.tick2line.set_markersize(2)                if gender == "Male":        ax[0,colidx].set_title("Males")    else:        ax[0,colidx].set_title("Females")    # # Plot: legend    # if gender == "Female":    #     ax[0,colidx].legend(frameon=False)     # else:    #     ax[0,colidx].legend(frameon=False, ncol=2, loc="lower right", bbox_to_anchor=(0.69,0.6), columnspacing=0.8)                 #%% Second row: Racedf_his = pd.read_csv("data_raw/hispanic_1999_2020_yearly.txt", delimiter="\t")df_his = df_his.replace("Unreliable", np.nan)df_his = df_his.replace("Suppressed", np.nan)df_his = df_his.replace("Not Applicable", np.nan)# Load non-hispanic data (AIAN, API, Black, Mixed and White )df_nonhis = pd.read_csv("data_raw/nonhispanic_1999_2020_yearly.txt",delimiter="\t")df_nonhis = df_nonhis.replace("Unreliable", np.nan)df_nonhis = df_nonhis.replace("Suppressed", np.nan)df_nonhis = df_nonhis.replace("Not Applicable", np.nan)# Extract crude rates MaleH = df_his[df_his["Gender"] == "Male"][["Year", "Deaths","Crude Rate"]].astype(float) MaleAI = df_nonhis[(df_nonhis["Gender"] == "Male") & \                   (df_nonhis["Race"] == "American Indian or Alaska Native")][["Year", "Deaths","Crude Rate"]].astype(float) MaleW = df_nonhis[(df_nonhis["Gender"] == "Male") & \                  (df_nonhis["Race"] == "White")][["Year", "Deaths","Crude Rate"]].astype(float) MaleB = df_nonhis[(df_nonhis["Gender"] == "Male") & \                  (df_nonhis["Race"] == "Black or African American")][["Year","Deaths", "Crude Rate"]].astype(float) MaleA = df_nonhis[(df_nonhis["Gender"] == "Male") & \                  (df_nonhis["Race"] == "Asian or Pacific Islander")][["Year", "Deaths", "Crude Rate"]].astype(float)MaleN = df_nonhis[(df_nonhis["Gender"] == "Male") & \                  (df_nonhis["Race"] == "Native Hawaiian or Other Pacific Islander")] [["Year","Deaths", "Crude Rate"]].astype(float)Male2 = df_nonhis[(df_nonhis["Gender"] == "Male") & \                  (df_nonhis["Race"] == "More than one race")][["Year", "Deaths", "Crude Rate"]].astype(float)    FemaleH = df_his[df_his["Gender"] == "Female"][["Year", "Deaths", "Crude Rate"]].astype(float) FemaleAI = df_nonhis[(df_nonhis["Gender"] == "Female") & \                     (df_nonhis["Race"] == "American Indian or Alaska Native")][["Year", "Deaths","Crude Rate"]].astype(float)FemaleW = df_nonhis[(df_nonhis["Gender"] == "Female") & \                    (df_nonhis["Race"] == "White")][["Year", "Deaths", "Crude Rate"]].astype(float) FemaleB = df_nonhis[(df_nonhis["Gender"] == "Female") & \                    (df_nonhis["Race"] == "Black or African American")][["Year", "Deaths","Crude Rate"]].astype(float) FemaleA = df_nonhis[(df_nonhis["Gender"] == "Female") & \                    (df_nonhis["Race"] == "Asian or Pacific Islander")][["Year","Deaths", "Crude Rate"]].astype(float) x = MaleH["Year"].astype(int)yai = MaleAI["Crude Rate"].astype(float).to_numpy() ya = MaleA["Crude Rate"].astype(float).to_numpy() yb = MaleB["Crude Rate"].astype(float).to_numpy() yh = MaleH["Crude Rate"].astype(float).to_numpy()yw = MaleW["Crude Rate"].astype(float).to_numpy() ms = 4 ax[1,0].plot(x, yai/yai[0], '-o', markersize=ms, color="tab:red", label="AIAN")ax[1,0].plot(x, ya/ya[0], '-o', markersize=ms, color="tab:blue",label="API")ax[1,0].plot(x, yb/yb[0], '-o', markersize=ms, color="tab:green",label="Black")ax[1,0].plot(x, yh/yh[0], '-o', markersize=ms, color="black" ,label="Hispanic")ax[1,0].plot(x, yw/yw[0], '-o', markersize=ms, color="tab:orange",label="White")# Plot: xlim, ylimax[1,0].set_xlim([1999, 2025])ax[1,0].set_ylim([0.4, 3.6])# Plot: legend, xlabel, ylabel, gridax[1,0].legend(frameon=False)ax[1,0].set_xlabel("Year")ax[1,0].set_ylabel("Normalized Crude Rate")ax[1,0].grid(visible=True, alpha=0.2)# Plot setting: xticks, yticksax[1,0].set_xticks(np.arange(2000, 2026, 5))        yticks = np.arange(0.5, 3.5, 0.5)ytick_labels = ['', '1', '', '2', '', '3']ax[1,0].set_yticks(yticks)ax[1,0].set_yticklabels(ytick_labels)ax[1,0].tick_params(axis='y', which='major', length=4)  # Long ticks for all ticksfor tick, label in zip(ax[1,0].yaxis.get_major_ticks(), ytick_labels):    if label == '':  # Shorter ticks for non-integral values        tick.tick1line.set_markersize(2)        tick.tick2line.set_markersize(2)#%% Plot female race groups (UNNORMALIZED)x = FemaleH["Year"].astype(int)yai = FemaleAI["Crude Rate"].astype(float).to_numpy() ; ymax = np.nanmax(yai)ya = FemaleA["Crude Rate"].astype(float).to_numpy() ; ymax = np.max([ymax, np.nanmax(ya)])yb = FemaleB["Crude Rate"].astype(float).to_numpy() ; ymax = np.max([ymax, np.nanmax(yb)])yh = FemaleH["Crude Rate"].astype(float).to_numpy() ; ymax = np.max([ymax, np.nanmax(yh)])yw = FemaleW["Crude Rate"].astype(float).to_numpy() ; ymax = np.max([ymax, np.nanmax(yw)])ax[1,1].plot(x, yai/yai[0], '-o', markersize=ms, color="tab:red", label="AIAN")ax[1,1].plot(x, ya/ya[0], '-o', markersize=ms, color="tab:blue",label="API")ax[1,1].plot(x, yb/yb[0], '-o', markersize=ms, color="tab:green",label="Black")ax[1,1].plot(x, yh/yh[0], '-o', markersize=ms, color="black" ,label="Hispanic")ax[1,1].plot(x, yw/yw[0], '-o', markersize=ms, color="tab:orange",label="White")# Plot: xlim, ylimax[1,1].set_xlim([1999, 2025])ax[1,1].set_ylim([0.4, 3.6])# Plot: legend, xlabel, ylabel, gridax[1,1].legend(frameon=False)ax[1,1].set_xlabel("Year",)# ax[1,1].set_ylabel("Normalized Crude Rate")ax[1,1].grid(visible=True, alpha=0.2)# Plot setting: xticks, yticksax[1,1].set_xticks(np.arange(2000, 2026, 5))        yticks = np.arange(0.5, 3.5, 0.5)ytick_labels = ['', '1', '', '2', '', '3']ax[1,1].set_yticks(yticks)ax[1,1].set_yticklabels(ytick_labels)ax[1,1].tick_params(axis='y', which='major', length=4)  # Long ticks for all ticksfor tick, label in zip(ax[1,1].yaxis.get_major_ticks(), ytick_labels):    if label == '':  # Shorter ticks for non-integral values        tick.tick1line.set_markersize(2)        tick.tick2line.set_markersize(2)# plt.savefig("Fig1.eps")fig.savefig('Fig2.tiff', dpi=400, format="tiff", pil_kwargs={"compression": "tiff_lzw"})